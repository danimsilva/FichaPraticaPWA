1 - O que são operações de “Commit”, “Push” e “Pop” efetuadas num repositório?

R: 

A operação "Commit" é usada para gravar alterações efetuadas no repositório git local. (fonte: https://graphite.dev/guides/git-add-commit-push)

A operação "git push" carrega para um repositório remoto 
as alterações efetuadas a nível local, fornecendo redundância e tornando-as disponíveis para outros programadores(fonte: https://graphite.dev/guides/git-add-commit-push)

A operação "POP" deixa o programador mover as suas alterações "escondidas", ou seja, não partilhadas, para o diretório de trabalho, eliminando estas alterações do "stash". (fonte: https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/Git-stash-pop) 

2 – Quais sáo as vantagens de usar Branchs num repositório git?

(Fonte: https://medium.com/@babuvenkatesh/github-branching-strategy-and-its-benefits-92e96d5ba75) Ao trabalhar com o GitHub, ter uma boa estratégia de branching é crucial na colaboração entre programadores e sua gestão.

Com uma boa estratégia de branching quando se trabalha num projeto, tem as seguintes vantagens:

1. Isolamento das tarefas: Uma estratégia de branching permite que os programadores trabalhem em funcionalidades, correção de erros, ou experiências isoladamente
sem interferir no código principal

2. Colaboração: Cada equipa que trabalhe num projeto pode criar a sua ramificação para trabalhar em tarefas independentemente.

3. Testes e qualidade do código: Ao ter ramificações separadas em cada tarefa, o código pode ser testado e revisto antes de adicionado ao ramo principal. Isto permite também detetar erros antecipadamente, reduzindo a probabilidade de introduzir erros no código principal.

4. Integração e implementação contínua: Os ramos são essenciais para implementar práticas contínuas de integração e implementação.

3 – Nos Merges de conteúdos resultantes de um “Pop” podem resultar em conflitos. Em
que consistem e como podem ser resolvidos esses conflitos?

R:. (fonte: https://www.themoderncoder.com/fix-git-stash-conflicts/) Ao aplicar o comando "git stash pop", este aplica as mudanças guardadas em "rascunho", ou seja, em stash, e de seguida elimina-as.

Podem existir conflitos nesse "merge", quando as alterações em stash são aplicadas por cima de novos "commits" ou outras alterações em progresso.

Como resolver? -> Antes de executar o comando "git stash pop <stash-index>", assegurar que as alterações são aplicadas com o comando "git add".

Se os ficheiros não aplicados possuem conflitos de "merge", o Git aborta a operação de eliminar a stash, com o erro: "error: Your local changes to the following files would be overwritten by merge"

Quando há esta falha na operação merge, devemos verificar o ficheiro que falhou na mesma operação. Devemos aí resolver manualmente o conflito, e correr o comando: "git add <file(s)-that-failed-merge>"

Devemos considerar também executar o comando "git stash drop <stash-index>" para garantir a eliminação do stash. 


4 – “Clone” e “Fork” são formas diferentes de replicar um repositório Git. Quais as
diferenças entre eles?

R:. O cloning consiste na criação de uma cópia do repositório remoto num computador local, que podemos sincronizar com o remoto.

O forking é uma cópia do repositório que permite-nos efetuar as nossas próprias alterações, sem impactar no projeto original.

Estas duas operações diferem no sentido de que o forking não sincroniza com o projeto original, enquanto que o cloning
sim.  